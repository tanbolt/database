<?php

use PHPUnit\Framework\TestCase;
use Tanbolt\Database\Model;
use Tanbolt\Database\Database;

class ModelActiveTest extends TestCase
{
    protected static $dbPath = 'ModelActiveTest';

    public static function setUpBeforeClass():void
    {
        @unlink(__DIR__.'/Fixtures/'.self::$dbPath);
        Database::putNode(['default' => [
            'driver' => 'sqlite',
            'dbname' => __DIR__.'/Fixtures/'.self::$dbPath,
        ]], true);
        $connection = (new ModelActiveTest_Foo)->connection();
        $connection->execute("CREATE TABLE `foo` (
            `id`  INTEGER PRIMARY KEY AUTOINCREMENT,
            `mid` mediumint,
            `create` integer DEFAULT (0),
            `update` datetime DEFAULT ('')
        )");
        parent::setUpBeforeClass();
    }

    public static function tearDownAfterClass():void
    {
        Database::getNode()->disconnect();
        Database::clearNode();
        @unlink(__DIR__.'/Fixtures/'.self::$dbPath);
        parent::tearDownAfterClass();
    }

    protected function tearDown():void
    {
        $statement = 'DELETE FROM `foo`';
        Database::getNode()->execute($statement);
        Database::getNode()->statement("DELETE FROM `SQLITE_SEQUENCE` WHERE `name` = 'foo'");
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testInstanceModelMethod()
    {
        // 测试下 instance()
        $now = time();
        $model = Model::instance('foo', 'id')->setCreateTimeColumn('create')
            ->setUpdateTimeColumn('update')->setCasts($casts = [
                'create' => Model::TIME,
                'update' => Model::TIMESTAMP,
            ])->newModel(['mid' => 2, ]);
        static::assertEquals($casts, $model->getCasts());
        static::assertEquals('create', $model->getCreateTimeColumn());
        static::assertEquals('update', $model->getUpdateTimeColumn());
        static::assertEquals('foo', $model->getTable());
        static::assertEquals('id', $model->getPrimaryColumn());
        static::assertTrue($model->isNewRecord());
        static::assertTrue($model->isChanged());
        static::assertEquals($model, $model->save());
        static::assertFalse($model->isNewRecord());
        static::assertFalse($model->isChanged());

        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [1], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(2, $row['mid']);

        // Model->find()
        $newModel = $model->find(1);
        static::assertEquals($casts, $newModel->getCasts());
        static::assertEquals('create', $newModel->getCreateTimeColumn());
        static::assertEquals('update', $newModel->getUpdateTimeColumn());
        static::assertEquals('foo', $newModel->getTable());
        static::assertEquals('id', $newModel->getPrimaryColumn());
        static::assertEquals(1, $newModel['id']);
        static::assertEquals(2, $newModel['mid']);
        $create = $newModel['create'];
        $update = $newModel['update'];
        static::assertLessThanOrEqual(strtotime($create), $now);
        static::assertLessThanOrEqual($update, $now);
        static::assertFalse($newModel->isNewRecord());
        static::assertFalse($newModel->isChanged());
    }

    public function testNewModelMethod()
    {
        $model = ModelActiveTest_Foo::newModel();
        static::assertEquals('foo', $model->getTable());
        static::assertEquals([], $model->toArray());
        static::assertEquals([], $model->getOriginal());
        static::assertTrue($model->isNewRecord());

        $model = ModelActiveTest_Foo::newModel(['foo' => 'bar']);
        static::assertEquals(['foo' => 'bar'], $model->toArray());
        static::assertEquals([], $model->getOriginal());
        static::assertTrue($model->isNewRecord());

        $model = ModelActiveTest_Foo::newModel([], false);
        static::assertEquals([], $model->toArray());
        static::assertEquals([], $model->getOriginal());
        static::assertFalse($model->isNewRecord());

        $model = ModelActiveTest_Foo::newModel(['foo' => 'bar'], false);
        static::assertEquals(['foo' => 'bar'], $model->toArray());
        static::assertEquals(['foo' => 'bar'], $model->getOriginal());
        static::assertFalse($model->isNewRecord());
    }

    public function testSaveModelMethod()
    {
        $now = time();
        static::assertFalse(ModelActiveTest_Foo::find());
        $model = ModelActiveTest_Foo::newModel([
            'mid' => 2,
        ]);
        static::assertTrue($model->isNewRecord());
        static::assertTrue($model->isChanged());
        static::assertSame($model, $model->save());
        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [1], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(2, $row['mid']);
        static::assertTrue($model->equal(ModelActiveTest_Foo::find(1)));
        static::assertEquals(1, $model['id']);
        static::assertEquals(2, $model['mid']);
        $create = $model['create'];
        $update = $model['update'];
        static::assertLessThanOrEqual(strtotime($create), $now);
        static::assertLessThanOrEqual($update, $now);
        static::assertFalse($model->isNewRecord());
        static::assertFalse($model->isChanged());

        sleep(2);
        $model->mid = 3;
        $model->save();
        static::assertEquals(3, $model['mid']);
        static::assertEquals($create, $model['create']);
        static::assertLessThan($model['update'], $update);
        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [1], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(3, $row['mid']);
        static::assertEquals($create, $row['create']);
        static::assertLessThan($row['update'], $update);

        $newTime = $now + 1000;
        $model->mid = 4;
        $model->create = $newTime;
        $model->setUpdateTime($newTime);
        $model->save();

        static::assertEquals(4, $model['mid']);
        static::assertEquals($newTime, strtotime($model['create']));
        static::assertEquals($model['update'], $newTime);

        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [1], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(4, $row['mid']);
        static::assertEquals($newTime, strtotime($row['create']));
        static::assertEquals($row['update'], $newTime);
    }

    public function testCreateModelMethod()
    {
        $now = time();
        // normal
        $model = ModelActiveTest_Foo::createModel([
            'mid' => 2,
        ]);
        static::assertFalse($model->isNewRecord());
        static::assertFalse($model->isChanged());
        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [1], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(2, $row['mid']);
        static::assertEquals(1, $model['id']);
        static::assertEquals(2, $model['mid']);
        static::assertLessThanOrEqual(strtotime($model['create']), $now);
        static::assertLessThanOrEqual($model['update'], $now);
        static::assertFalse($model->isChanged());

        // normal with primary column
        $model = ModelActiveTest_Foo::createModel([
            'id' => 3,
            'mid' => 3,
        ]);
        static::assertFalse($model->isNewRecord());
        static::assertFalse($model->isChanged());
        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [3], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(3, $row['mid']);
        static::assertEquals(3, $model['id']);
        static::assertEquals(3, $model['mid']);
        static::assertLessThanOrEqual(strtotime($model['create']), $now);
        static::assertLessThanOrEqual($model['update'], $now);

        // without create time column
        $model = ModelActiveTest_FooWithoutCreateTimeColumn::createModel([
            'mid' => 4,
        ]);
        static::assertFalse($model->isNewRecord());
        static::assertFalse($model->isChanged());
        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [4], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(4, $row['mid']);
        static::assertEquals(4, $model['id']);
        static::assertEquals(4, $model['mid']);
        static::assertLessThanOrEqual($model['update'], $now);
        static::assertFalse(isset($model['create']));

        // fresh
        $newModel = $model->fresh();
        $newModel->mid = 5;
        static::assertTrue($newModel->isChanged());
        static::assertEquals('1970-01-01 00:00:00', $newModel['create']);
        static::assertEquals(5, $newModel['mid']);
        static::assertFalse(isset($model['create']));
        static::assertEquals(4, $model['mid']);

        // refresh
        static::assertSame($model, $model->refresh());
        static::assertEquals('1970-01-01 00:00:00', $model['create']);

        static::assertSame($newModel, $newModel->refresh());
        static::assertEquals(4, $newModel['mid']);
        static::assertFalse($newModel->isChanged());

        // without update time column
        $model = ModelActiveTest_FooWithoutUpdateTimeColumn::createModel([
            'mid' => 6,
        ]);
        static::assertFalse($model->isNewRecord());
        static::assertFalse($model->isChanged());
        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [5], PDO::FETCH_ASSOC);
        static::assertEquals([
            'id', 'mid', 'create', 'update'
        ], array_keys($row));
        static::assertEquals(6, $row['mid']);
        static::assertEquals(5, $model['id']);
        static::assertEquals(6, $model['mid']);
        static::assertLessThanOrEqual(strtotime($model['create']), $now);
        static::assertFalse(isset($model['update']));

        // fresh
        $newModel = $model->fresh();
        static::assertEquals(0, $newModel['update']);
        static::assertFalse(isset($model['update']));
        $model = $newModel;
        static::assertEquals(0, $model['update']);
    }

    public function testModelQueryBuilderMethod()
    {
        static::assertFalse(ModelActiveTest_Foo::getOne());

        // insert without IncrementColumn
        $row = ModelActiveTest_Foo::insert(['mid' => 2]);
        static::assertEquals(1, $row);
        static::assertEquals(0, ModelActiveTest_Foo::lastId());

        // insert and get last id
        $row = ModelActiveTest_Foo::setIncrementColumn('id')->insert(['mid' => 3]);
        static::assertEquals(1, $row);
        static::assertEquals(2, ModelActiveTest_Foo::lastId());

        // insert and get last ids
        $row = ModelActiveTest_Foo::setIncrementColumn('id')->insert([
            ['mid' => 4],
            ['mid' => 5],
            ['mid' => 6]
        ]);
        static::assertEquals(3, $row);
        static::assertEquals([3, 4, 5], ModelActiveTest_Foo::lastId());

        // insert and get last ids
        $row = ModelActiveTest_Foo::setIncrementColumn('id')->insert([
            ['id' => 10, 'mid' => 4],
            ['mid' => 5],
            ['id' => 14, 'mid' => 6],
            ['mid' => 6],
        ]);
        static::assertEquals(4, $row);
        static::assertEquals([10, 15, 14, 16], ModelActiveTest_Foo::lastId());

        // exists
        static::assertFalse(ModelActiveTest_Foo::wherePrimary(50)->exists());
        static::assertTrue(ModelActiveTest_Foo::wherePrimary(2)->exists());

        // get one
        $row = ModelActiveTest_Foo::order('id')->getOne(PDO::FETCH_ASSOC);
        static::assertEquals(16, $row['id']);
        static::assertEquals(6, $row['mid']);

        $row = ModelActiveTest_Foo::wherePrimary(2)->getOne(PDO::FETCH_ASSOC);
        static::assertEquals(2, $row['id']);
        static::assertEquals(3, $row['mid']);

        // get many
        $list = ModelActiveTest_Foo::select('id', 'mid')->where('id', '<', 3)->getMany(PDO::FETCH_ASSOC);
        static::assertEquals([
            ['id' => 1, 'mid' => 2],
            ['id' => 2, 'mid' => 3]
        ], $list);

        // aggregate
        static::assertEquals(9, ModelActiveTest_Foo::records());
        static::assertEquals(70, ModelActiveTest_Foo::sum('id'));
        static::assertEquals(6, ModelActiveTest_Foo::max('mid'));
        static::assertEquals(2, ModelActiveTest_Foo::min('mid'));
        static::assertEquals(4, ModelActiveTest_Foo::avg('mid'));

        // update
        static::assertEquals(2, ModelActiveTest_Foo::where('id', '>', 14)->update(['mid' => 5]));
        $row = ModelActiveTest_Foo::select('mid')->wherePrimary(16)->getOne(PDO::FETCH_ASSOC);
        static::assertEquals(5, $row['mid']);

        // upsert
        static::assertEquals(2, ModelActiveTest_Foo::upsert([
            ['id' => 16, 'mid' => 9],
            ['id' => 17, 'mid' => 10],
        ], 'id'));
        static::assertEquals([
            ['id' => 16, 'mid' => 9],
            ['id' => 17, 'mid' => 10],
        ], ModelActiveTest_Foo::select('id', 'mid')->where('id', '>', 15)->getMany(PDO::FETCH_ASSOC));

        // delete
        static::assertEquals(2, ModelActiveTest_Foo::where('id', '>', 15)->delete());
        static::assertEquals([], ModelActiveTest_Foo::select('id', 'mid')->where('id', '>', 15)->getMany(PDO::FETCH_ASSOC));
    }

    public function testFindMethod()
    {
        static::assertFalse(ModelActiveTest_Foo::find());
        static::assertFalse(ModelActiveTest_Foo::find(1));

        $newModel = ModelActiveTest_Foo::createModel([
            'id' => 2,
            'mid' => 3,
        ]);
        $model = ModelActiveTest_Foo::find(2);
        $modelSame = ModelActiveTest_Foo::wherePrimary(2)->find();
        static::assertTrue($newModel->equal($model));
        static::assertTrue($newModel->equal($modelSame));

        static::assertEquals(2, $model->id);
        static::assertEquals(3, $model['mid']);
        static::assertFalse($model->isChanged());
    }

    public function testFindOrThrowMethod()
    {
        try {
            ModelActiveTest_Foo::findOrThrow(1);
            static::fail('It should throw exception if model not find');
        } catch (\PHPUnit_Exception $e) {
            throw $e;
        } catch (\Exception $e) {
            // do nothing
        }

        $newModel = ModelActiveTest_Foo::createModel([
            'id' => 2,
            'mid' => 3,
        ]);
        $model = ModelActiveTest_Foo::findOrThrow(2);
        $modelSame = ModelActiveTest_Foo::wherePrimary(2)->findOrThrow();
        static::assertTrue($newModel->equal($model));
        static::assertTrue($newModel->equal($modelSame));

        static::assertEquals(2, $model->id);
        static::assertEquals(3, $model['mid']);
        static::assertFalse($model->isChanged());
    }

    public function testModelDropMethod()
    {
        static::assertFalse(ModelActiveTest_Foo::find(1));
        $model = ModelActiveTest_Foo::createModel(['mid' => 2]);
        static::assertTrue($model->equal(ModelActiveTest_Foo::find(1)));

        $model2 = ModelActiveTest_Foo::createModel(['mid' => 3]);
        static::assertTrue($model2->equal(ModelActiveTest_Foo::find(2)));

        static::assertSame($model, $model->drop());
        static::assertFalse(ModelActiveTest_Foo::find(1));
        static::assertTrue($model2->equal(ModelActiveTest_Foo::find(2)));

        $row = $model->connection()->fetchOne('SELECT * FROM `foo` WHERE `id` = ?', [1], PDO::FETCH_ASSOC);
        static::assertFalse($row);

        $row = $model->connection()->fetchOne('SELECT id FROM `foo` WHERE `id` = ?', [2], PDO::FETCH_ASSOC);
        static::assertEquals(['id' => 2], $row);
    }

}


class ModelActiveTest_Foo extends Model
{
    protected $tableName = 'foo';

    protected $casts = [
        'create' => self::TIME,
        'update' => self::TIMESTAMP,
    ];

    protected $createTimeColumn = 'create';

    protected $updateTimeColumn = 'update';
}

class ModelActiveTest_FooWithoutCreateTimeColumn extends Model
{
    protected $tableName = 'foo';

    protected $casts = [
        'create' => self::TIME,
        'update' => self::TIMESTAMP,
    ];

    protected $updateTimeColumn = 'update';
}

class ModelActiveTest_FooWithoutUpdateTimeColumn extends Model
{
    protected $tableName = 'foo';

    protected $casts = [
        'create' => self::TIME,
        'update' => self::TIMESTAMP,
    ];

    protected $createTimeColumn = 'create';
}